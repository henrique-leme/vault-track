schema {
  query: Query
  mutation: Mutation
}

type Query {
  user(id: ID!): User
}

type User implements Node {
  id: ID!
  firstName: String
  lastName: String
  taxId: String
}

interface Node {
  id: ID!
}

type Mutation {
  RegisterUser(input: RegisterUserInput!): RegisterUserPayload
  LoginUser(input: LoginUserInput!): LoginUserPayload
  DeleteUser(input: DeleteUserInput!): DeleteUserPayload
  UpdateUser(input: UpdateUserInput!): UpdateUserPayload
}

input RegisterUserInput {
  clientMutationId: String
  firstName: String!
  lastName: String
  taxId: String!
  password: String!
}

type RegisterUserPayload {
  clientMutationId: String
  user: User
  jwt: String
}

input LoginUserInput {
  clientMutationId: String
  taxId: String!
  password: String!
}

type LoginUserPayload {
  clientMutationId: String
  validUser: User
  jwt: String
}

input DeleteUserInput {
  clientMutationId: String
  jwt: String!
  taxId: String!
}

type DeleteUserPayload {
  clientMutationId: String
  deletedUser: User
  message: String
}

input UpdateUserInput {
  clientMutationId: String
  password: String!
  firstName: String
  lastName: String
  newPassword: String
}

type UpdateUserPayload {
  clientMutationId: String
  updatedUser: User
}
